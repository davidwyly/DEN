/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DecentralizedExchangeNetworkInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_DENOMINATOR"
      | "MAX_PARTNER_FEE_NUMERATOR"
      | "SYSTEM_FEE_NUMERATOR"
      | "WETH"
      | "algebraSwapCallback"
      | "beamswapV3SwapCallback"
      | "emergencyWithdrawETH"
      | "emergencyWithdrawToken"
      | "estimateAmountOut"
      | "fusionXV3SwapCallback"
      | "getFees"
      | "getUniswapVersion"
      | "getV2PoolFromRouter"
      | "getV3PoolFromFactory"
      | "isPoolSupported"
      | "owner"
      | "pancakeV3SwapCallback"
      | "partner"
      | "partnerFeeNumerator"
      | "partnerFeeReceiver"
      | "renounceOwnership"
      | "setPartnerFeeNumerator"
      | "setPartnerFeeReceiver"
      | "setSystemFeeReceiver"
      | "statistics"
      | "swapCallback"
      | "swapETHForToken"
      | "swapETHForTokenWithCustomFee"
      | "swapTokenForETH"
      | "swapTokenForETHWithCustomFee"
      | "swapTokenForToken"
      | "swapTokenForTokenWithCustomFee"
      | "systemFeeReceiver"
      | "transferOwnership"
      | "transferPartnership"
      | "uniswapV3SwapCallback"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmergencyWithdrawETH"
      | "EmergencyWithdrawToken"
      | "OwnershipTransferred"
      | "PartnerFeeNumeratorChanged"
      | "PartnerFeeReceiverChanged"
      | "PartnerFeesCollectedOverflow"
      | "PartnershipTransferred"
      | "Swap"
      | "SystemFeeReceiverChanged"
      | "SystemFeesCollectedOverflow"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PARTNER_FEE_NUMERATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SYSTEM_FEE_NUMERATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "algebraSwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beamswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateAmountOut",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fusionXV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapVersion",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getV2PoolFromRouter",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getV3PoolFromFactory",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolSupported",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pancakeV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "partner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "partnerFeeNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "partnerFeeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPartnerFeeNumerator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPartnerFeeReceiver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSystemFeeReceiver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "statistics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHForToken",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHForTokenWithCustomFee",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokenForETH",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokenForETHWithCustomFee",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokenForToken",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokenForTokenWithCustomFee",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "systemFeeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPartnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PARTNER_FEE_NUMERATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SYSTEM_FEE_NUMERATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "algebraSwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beamswapV3SwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fusionXV3SwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getV2PoolFromRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getV3PoolFromFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pancakeV3SwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "partner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partnerFeeNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partnerFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPartnerFeeNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPartnerFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSystemFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "statistics", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForTokenWithCustomFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokenForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokenForETHWithCustomFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokenForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokenForTokenWithCustomFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPartnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;
}

export namespace EmergencyWithdrawETHEvent {
  export type InputTuple = [caller: AddressLike, amount: BigNumberish];
  export type OutputTuple = [caller: string, amount: bigint];
  export interface OutputObject {
    caller: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyWithdrawTokenEvent {
  export type InputTuple = [
    caller: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [caller: string, token: string, amount: bigint];
  export interface OutputObject {
    caller: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PartnerFeeNumeratorChangedEvent {
  export type InputTuple = [
    caller: AddressLike,
    oldFeeNumerator: BigNumberish,
    newFeeNumerator: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    oldFeeNumerator: bigint,
    newFeeNumerator: bigint
  ];
  export interface OutputObject {
    caller: string;
    oldFeeNumerator: bigint;
    newFeeNumerator: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PartnerFeeReceiverChangedEvent {
  export type InputTuple = [
    caller: AddressLike,
    oldPartnerFeeReceiver: AddressLike,
    newPartnerFeeReceiver: AddressLike
  ];
  export type OutputTuple = [
    caller: string,
    oldPartnerFeeReceiver: string,
    newPartnerFeeReceiver: string
  ];
  export interface OutputObject {
    caller: string;
    oldPartnerFeeReceiver: string;
    newPartnerFeeReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PartnerFeesCollectedOverflowEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PartnershipTransferredEvent {
  export type InputTuple = [
    caller: AddressLike,
    oldPartner: AddressLike,
    newPartner: AddressLike
  ];
  export type OutputTuple = [
    caller: string,
    oldPartner: string,
    newPartner: string
  ];
  export interface OutputObject {
    caller: string;
    oldPartner: string;
    newPartner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapEvent {
  export type InputTuple = [
    caller: AddressLike,
    pool: AddressLike,
    uniswapVersion: BigNumberish,
    tokenIn: AddressLike,
    tokenOut: AddressLike
  ];
  export type OutputTuple = [
    caller: string,
    pool: string,
    uniswapVersion: bigint,
    tokenIn: string,
    tokenOut: string
  ];
  export interface OutputObject {
    caller: string;
    pool: string;
    uniswapVersion: bigint;
    tokenIn: string;
    tokenOut: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SystemFeeReceiverChangedEvent {
  export type InputTuple = [
    caller: AddressLike,
    oldSystemFeeReceiver: AddressLike,
    newSystemFeeReceiver: AddressLike
  ];
  export type OutputTuple = [
    caller: string,
    oldSystemFeeReceiver: string,
    newSystemFeeReceiver: string
  ];
  export interface OutputObject {
    caller: string;
    oldSystemFeeReceiver: string;
    newSystemFeeReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SystemFeesCollectedOverflowEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DecentralizedExchangeNetwork extends BaseContract {
  connect(runner?: ContractRunner | null): DecentralizedExchangeNetwork;
  waitForDeployment(): Promise<this>;

  interface: DecentralizedExchangeNetworkInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  MAX_PARTNER_FEE_NUMERATOR: TypedContractMethod<[], [bigint], "view">;

  SYSTEM_FEE_NUMERATOR: TypedContractMethod<[], [bigint], "view">;

  WETH: TypedContractMethod<[], [string], "view">;

  algebraSwapCallback: TypedContractMethod<
    [
      _amount0Delta: BigNumberish,
      _amount1Delta: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  beamswapV3SwapCallback: TypedContractMethod<
    [
      _amount0Delta: BigNumberish,
      _amount1Delta: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  emergencyWithdrawETH: TypedContractMethod<[], [void], "nonpayable">;

  emergencyWithdrawToken: TypedContractMethod<
    [_token: AddressLike],
    [void],
    "nonpayable"
  >;

  estimateAmountOut: TypedContractMethod<
    [_pool: AddressLike, _tokenIn: AddressLike, _amountIn: BigNumberish],
    [bigint],
    "view"
  >;

  fusionXV3SwapCallback: TypedContractMethod<
    [
      _amount0Delta: BigNumberish,
      _amount1Delta: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFees: TypedContractMethod<
    [_amount: BigNumberish, _partnerFeeNumerator: BigNumberish],
    [[bigint, bigint] & { _systemFee: bigint; _partnerFee: bigint }],
    "view"
  >;

  getUniswapVersion: TypedContractMethod<
    [_pool: AddressLike],
    [bigint],
    "view"
  >;

  getV2PoolFromRouter: TypedContractMethod<
    [_router: AddressLike, _token0: AddressLike, _token1: AddressLike],
    [string],
    "view"
  >;

  getV3PoolFromFactory: TypedContractMethod<
    [
      _factory: AddressLike,
      _token0: AddressLike,
      _token1: AddressLike,
      _fee: BigNumberish
    ],
    [string],
    "view"
  >;

  isPoolSupported: TypedContractMethod<[_pool: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pancakeV3SwapCallback: TypedContractMethod<
    [
      _amount0Delta: BigNumberish,
      _amount1Delta: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  partner: TypedContractMethod<[], [string], "view">;

  partnerFeeNumerator: TypedContractMethod<[], [bigint], "view">;

  partnerFeeReceiver: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setPartnerFeeNumerator: TypedContractMethod<
    [_newPartnerFeeNumerator: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPartnerFeeReceiver: TypedContractMethod<
    [_newPartnerFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  setSystemFeeReceiver: TypedContractMethod<
    [_newSystemFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  statistics: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        swapTokenForETHCount: bigint;
        swapETHForTokenCount: bigint;
        swapTokenForTokenCount: bigint;
      }
    ],
    "view"
  >;

  swapCallback: TypedContractMethod<
    [
      _amount0Delta: BigNumberish,
      _amount1Delta: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  swapETHForToken: TypedContractMethod<
    [_pool: AddressLike, _tokenOut: AddressLike, _amountOutMin: BigNumberish],
    [void],
    "payable"
  >;

  swapETHForTokenWithCustomFee: TypedContractMethod<
    [
      _pool: AddressLike,
      _tokenOut: AddressLike,
      _amountOutMin: BigNumberish,
      _customPartnerFeeNum: BigNumberish
    ],
    [void],
    "payable"
  >;

  swapTokenForETH: TypedContractMethod<
    [
      _pool: AddressLike,
      _tokenIn: AddressLike,
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  swapTokenForETHWithCustomFee: TypedContractMethod<
    [
      _pool: AddressLike,
      _tokenIn: AddressLike,
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _customPartnerFeeNum: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  swapTokenForToken: TypedContractMethod<
    [
      _pool: AddressLike,
      _tokenIn: AddressLike,
      _tokenOut: AddressLike,
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  swapTokenForTokenWithCustomFee: TypedContractMethod<
    [
      _pool: AddressLike,
      _tokenIn: AddressLike,
      _tokenOut: AddressLike,
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _customPartnerFeeNum: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  systemFeeReceiver: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferPartnership: TypedContractMethod<
    [_newPartner: AddressLike],
    [void],
    "nonpayable"
  >;

  uniswapV3SwapCallback: TypedContractMethod<
    [
      _amount0Delta: BigNumberish,
      _amount1Delta: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PARTNER_FEE_NUMERATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SYSTEM_FEE_NUMERATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "algebraSwapCallback"
  ): TypedContractMethod<
    [
      _amount0Delta: BigNumberish,
      _amount1Delta: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beamswapV3SwapCallback"
  ): TypedContractMethod<
    [
      _amount0Delta: BigNumberish,
      _amount1Delta: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdrawETH"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdrawToken"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "estimateAmountOut"
  ): TypedContractMethod<
    [_pool: AddressLike, _tokenIn: AddressLike, _amountIn: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "fusionXV3SwapCallback"
  ): TypedContractMethod<
    [
      _amount0Delta: BigNumberish,
      _amount1Delta: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getFees"
  ): TypedContractMethod<
    [_amount: BigNumberish, _partnerFeeNumerator: BigNumberish],
    [[bigint, bigint] & { _systemFee: bigint; _partnerFee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUniswapVersion"
  ): TypedContractMethod<[_pool: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getV2PoolFromRouter"
  ): TypedContractMethod<
    [_router: AddressLike, _token0: AddressLike, _token1: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getV3PoolFromFactory"
  ): TypedContractMethod<
    [
      _factory: AddressLike,
      _token0: AddressLike,
      _token1: AddressLike,
      _fee: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPoolSupported"
  ): TypedContractMethod<[_pool: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pancakeV3SwapCallback"
  ): TypedContractMethod<
    [
      _amount0Delta: BigNumberish,
      _amount1Delta: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "partner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "partnerFeeNumerator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "partnerFeeReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPartnerFeeNumerator"
  ): TypedContractMethod<
    [_newPartnerFeeNumerator: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPartnerFeeReceiver"
  ): TypedContractMethod<
    [_newPartnerFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSystemFeeReceiver"
  ): TypedContractMethod<
    [_newSystemFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "statistics"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        swapTokenForETHCount: bigint;
        swapETHForTokenCount: bigint;
        swapTokenForTokenCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapCallback"
  ): TypedContractMethod<
    [
      _amount0Delta: BigNumberish,
      _amount1Delta: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapETHForToken"
  ): TypedContractMethod<
    [_pool: AddressLike, _tokenOut: AddressLike, _amountOutMin: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapETHForTokenWithCustomFee"
  ): TypedContractMethod<
    [
      _pool: AddressLike,
      _tokenOut: AddressLike,
      _amountOutMin: BigNumberish,
      _customPartnerFeeNum: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapTokenForETH"
  ): TypedContractMethod<
    [
      _pool: AddressLike,
      _tokenIn: AddressLike,
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapTokenForETHWithCustomFee"
  ): TypedContractMethod<
    [
      _pool: AddressLike,
      _tokenIn: AddressLike,
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _customPartnerFeeNum: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapTokenForToken"
  ): TypedContractMethod<
    [
      _pool: AddressLike,
      _tokenIn: AddressLike,
      _tokenOut: AddressLike,
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapTokenForTokenWithCustomFee"
  ): TypedContractMethod<
    [
      _pool: AddressLike,
      _tokenIn: AddressLike,
      _tokenOut: AddressLike,
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _customPartnerFeeNum: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "systemFeeReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferPartnership"
  ): TypedContractMethod<[_newPartner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uniswapV3SwapCallback"
  ): TypedContractMethod<
    [
      _amount0Delta: BigNumberish,
      _amount1Delta: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EmergencyWithdrawETH"
  ): TypedContractEvent<
    EmergencyWithdrawETHEvent.InputTuple,
    EmergencyWithdrawETHEvent.OutputTuple,
    EmergencyWithdrawETHEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyWithdrawToken"
  ): TypedContractEvent<
    EmergencyWithdrawTokenEvent.InputTuple,
    EmergencyWithdrawTokenEvent.OutputTuple,
    EmergencyWithdrawTokenEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PartnerFeeNumeratorChanged"
  ): TypedContractEvent<
    PartnerFeeNumeratorChangedEvent.InputTuple,
    PartnerFeeNumeratorChangedEvent.OutputTuple,
    PartnerFeeNumeratorChangedEvent.OutputObject
  >;
  getEvent(
    key: "PartnerFeeReceiverChanged"
  ): TypedContractEvent<
    PartnerFeeReceiverChangedEvent.InputTuple,
    PartnerFeeReceiverChangedEvent.OutputTuple,
    PartnerFeeReceiverChangedEvent.OutputObject
  >;
  getEvent(
    key: "PartnerFeesCollectedOverflow"
  ): TypedContractEvent<
    PartnerFeesCollectedOverflowEvent.InputTuple,
    PartnerFeesCollectedOverflowEvent.OutputTuple,
    PartnerFeesCollectedOverflowEvent.OutputObject
  >;
  getEvent(
    key: "PartnershipTransferred"
  ): TypedContractEvent<
    PartnershipTransferredEvent.InputTuple,
    PartnershipTransferredEvent.OutputTuple,
    PartnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Swap"
  ): TypedContractEvent<
    SwapEvent.InputTuple,
    SwapEvent.OutputTuple,
    SwapEvent.OutputObject
  >;
  getEvent(
    key: "SystemFeeReceiverChanged"
  ): TypedContractEvent<
    SystemFeeReceiverChangedEvent.InputTuple,
    SystemFeeReceiverChangedEvent.OutputTuple,
    SystemFeeReceiverChangedEvent.OutputObject
  >;
  getEvent(
    key: "SystemFeesCollectedOverflow"
  ): TypedContractEvent<
    SystemFeesCollectedOverflowEvent.InputTuple,
    SystemFeesCollectedOverflowEvent.OutputTuple,
    SystemFeesCollectedOverflowEvent.OutputObject
  >;

  filters: {
    "EmergencyWithdrawETH(address,uint256)": TypedContractEvent<
      EmergencyWithdrawETHEvent.InputTuple,
      EmergencyWithdrawETHEvent.OutputTuple,
      EmergencyWithdrawETHEvent.OutputObject
    >;
    EmergencyWithdrawETH: TypedContractEvent<
      EmergencyWithdrawETHEvent.InputTuple,
      EmergencyWithdrawETHEvent.OutputTuple,
      EmergencyWithdrawETHEvent.OutputObject
    >;

    "EmergencyWithdrawToken(address,address,uint256)": TypedContractEvent<
      EmergencyWithdrawTokenEvent.InputTuple,
      EmergencyWithdrawTokenEvent.OutputTuple,
      EmergencyWithdrawTokenEvent.OutputObject
    >;
    EmergencyWithdrawToken: TypedContractEvent<
      EmergencyWithdrawTokenEvent.InputTuple,
      EmergencyWithdrawTokenEvent.OutputTuple,
      EmergencyWithdrawTokenEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PartnerFeeNumeratorChanged(address,uint256,uint256)": TypedContractEvent<
      PartnerFeeNumeratorChangedEvent.InputTuple,
      PartnerFeeNumeratorChangedEvent.OutputTuple,
      PartnerFeeNumeratorChangedEvent.OutputObject
    >;
    PartnerFeeNumeratorChanged: TypedContractEvent<
      PartnerFeeNumeratorChangedEvent.InputTuple,
      PartnerFeeNumeratorChangedEvent.OutputTuple,
      PartnerFeeNumeratorChangedEvent.OutputObject
    >;

    "PartnerFeeReceiverChanged(address,address,address)": TypedContractEvent<
      PartnerFeeReceiverChangedEvent.InputTuple,
      PartnerFeeReceiverChangedEvent.OutputTuple,
      PartnerFeeReceiverChangedEvent.OutputObject
    >;
    PartnerFeeReceiverChanged: TypedContractEvent<
      PartnerFeeReceiverChangedEvent.InputTuple,
      PartnerFeeReceiverChangedEvent.OutputTuple,
      PartnerFeeReceiverChangedEvent.OutputObject
    >;

    "PartnerFeesCollectedOverflow(address)": TypedContractEvent<
      PartnerFeesCollectedOverflowEvent.InputTuple,
      PartnerFeesCollectedOverflowEvent.OutputTuple,
      PartnerFeesCollectedOverflowEvent.OutputObject
    >;
    PartnerFeesCollectedOverflow: TypedContractEvent<
      PartnerFeesCollectedOverflowEvent.InputTuple,
      PartnerFeesCollectedOverflowEvent.OutputTuple,
      PartnerFeesCollectedOverflowEvent.OutputObject
    >;

    "PartnershipTransferred(address,address,address)": TypedContractEvent<
      PartnershipTransferredEvent.InputTuple,
      PartnershipTransferredEvent.OutputTuple,
      PartnershipTransferredEvent.OutputObject
    >;
    PartnershipTransferred: TypedContractEvent<
      PartnershipTransferredEvent.InputTuple,
      PartnershipTransferredEvent.OutputTuple,
      PartnershipTransferredEvent.OutputObject
    >;

    "Swap(address,address,uint8,address,address)": TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
    Swap: TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;

    "SystemFeeReceiverChanged(address,address,address)": TypedContractEvent<
      SystemFeeReceiverChangedEvent.InputTuple,
      SystemFeeReceiverChangedEvent.OutputTuple,
      SystemFeeReceiverChangedEvent.OutputObject
    >;
    SystemFeeReceiverChanged: TypedContractEvent<
      SystemFeeReceiverChangedEvent.InputTuple,
      SystemFeeReceiverChangedEvent.OutputTuple,
      SystemFeeReceiverChangedEvent.OutputObject
    >;

    "SystemFeesCollectedOverflow(address)": TypedContractEvent<
      SystemFeesCollectedOverflowEvent.InputTuple,
      SystemFeesCollectedOverflowEvent.OutputTuple,
      SystemFeesCollectedOverflowEvent.OutputObject
    >;
    SystemFeesCollectedOverflow: TypedContractEvent<
      SystemFeesCollectedOverflowEvent.InputTuple,
      SystemFeesCollectedOverflowEvent.OutputTuple,
      SystemFeesCollectedOverflowEvent.OutputObject
    >;
  };
}
