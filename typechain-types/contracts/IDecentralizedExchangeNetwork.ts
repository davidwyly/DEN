/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IDecentralizedExchangeNetworkInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PARTNER_FEE_DENOMINATOR"
      | "SYSTEM_FEE_DENOMINATOR"
      | "SYSTEM_FEE_NUMERATOR"
      | "WETH"
      | "estimateAmountOut"
      | "getV2PoolFromRouter"
      | "getV3PoolFromFactory"
      | "isPoolSupported"
      | "partnerFeeNumerator"
      | "swapETHForToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PARTNER_FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SYSTEM_FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SYSTEM_FEE_NUMERATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "estimateAmountOut",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getV2PoolFromRouter",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getV3PoolFromFactory",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolSupported",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "partnerFeeNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHForToken",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "PARTNER_FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SYSTEM_FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SYSTEM_FEE_NUMERATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getV2PoolFromRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getV3PoolFromFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partnerFeeNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForToken",
    data: BytesLike
  ): Result;
}

export interface IDecentralizedExchangeNetwork extends BaseContract {
  connect(runner?: ContractRunner | null): IDecentralizedExchangeNetwork;
  waitForDeployment(): Promise<this>;

  interface: IDecentralizedExchangeNetworkInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PARTNER_FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  SYSTEM_FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  SYSTEM_FEE_NUMERATOR: TypedContractMethod<[], [bigint], "view">;

  WETH: TypedContractMethod<[], [string], "view">;

  estimateAmountOut: TypedContractMethod<
    [
      _pool: AddressLike,
      _tokenIn: AddressLike,
      _tokenOut: AddressLike,
      _amountIn: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getV2PoolFromRouter: TypedContractMethod<
    [_router: AddressLike, _token0: AddressLike, _token1: AddressLike],
    [string],
    "view"
  >;

  getV3PoolFromFactory: TypedContractMethod<
    [
      _factory: AddressLike,
      _token0: AddressLike,
      _token1: AddressLike,
      _fee: BigNumberish
    ],
    [string],
    "view"
  >;

  isPoolSupported: TypedContractMethod<[_pool: AddressLike], [boolean], "view">;

  partnerFeeNumerator: TypedContractMethod<[], [bigint], "view">;

  swapETHForToken: TypedContractMethod<
    [_pool: AddressLike, _tokenOut: AddressLike, _amountOutMin: BigNumberish],
    [bigint],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PARTNER_FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SYSTEM_FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SYSTEM_FEE_NUMERATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "estimateAmountOut"
  ): TypedContractMethod<
    [
      _pool: AddressLike,
      _tokenIn: AddressLike,
      _tokenOut: AddressLike,
      _amountIn: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getV2PoolFromRouter"
  ): TypedContractMethod<
    [_router: AddressLike, _token0: AddressLike, _token1: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getV3PoolFromFactory"
  ): TypedContractMethod<
    [
      _factory: AddressLike,
      _token0: AddressLike,
      _token1: AddressLike,
      _fee: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPoolSupported"
  ): TypedContractMethod<[_pool: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "partnerFeeNumerator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "swapETHForToken"
  ): TypedContractMethod<
    [_pool: AddressLike, _tokenOut: AddressLike, _amountOutMin: BigNumberish],
    [bigint],
    "payable"
  >;

  filters: {};
}
