/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IWETHInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveAndCall"
      | "decimals"
      | "deposit"
      | "depositTo"
      | "depositToAndCall"
      | "flashMinted"
      | "transferAndCall"
      | "withdraw"
      | "withdrawFrom"
      | "withdrawTo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveAndCall",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "flashMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferAndCall",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;
}

export interface IWETH extends BaseContract {
  connect(runner?: ContractRunner | null): IWETH;
  waitForDeployment(): Promise<this>;

  interface: IWETHInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveAndCall: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish, data: BytesLike],
    [boolean],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<[], [void], "payable">;

  depositTo: TypedContractMethod<[to: AddressLike], [void], "payable">;

  depositToAndCall: TypedContractMethod<
    [to: AddressLike, data: BytesLike],
    [boolean],
    "payable"
  >;

  flashMinted: TypedContractMethod<[], [bigint], "view">;

  transferAndCall: TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [boolean],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;

  withdrawFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawTo: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveAndCall"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish, data: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "depositTo"
  ): TypedContractMethod<[to: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "depositToAndCall"
  ): TypedContractMethod<
    [to: AddressLike, data: BytesLike],
    [boolean],
    "payable"
  >;
  getFunction(
    nameOrSignature: "flashMinted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferAndCall"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawTo"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
